import requests
import time
import typer
from urllib.parse import urlparse
from typing import Optional, Dict, Any
from tqdm import tqdm
from .base import PipelineStage
from rostral.models import DownloadConfig
from rostral.stages.transforms import transform_smart_url
from rostral.db import is_known_by_hash, get_event_hash
from rostral.db import is_known_by_url 

class DownloadStage(PipelineStage):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.max_retries = 3
        self.retry_delay = 2
        self.chunk_size = 1024 * 1024  # 1MB chunks

    def _is_pdf_url(self, url: str) -> bool:
        parsed = urlparse(url.lower())
        if parsed.path.endswith('.pdf'):
            return True
        # –î–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ PDF (–Ω–æ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ _download_file)
        if 'yandex.ru' in parsed.netloc or 'yadi.sk' in parsed.netloc:
            return True
        return False

    def _download_file(self, url: str, verify_ssl: bool) -> Optional[bytes]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        time.sleep(0.5)
        source = self.config.source
        headers = source.fetch.headers or {}
        try:
            with requests.get(
                url,
                stream=True,
                timeout=self.config.download.timeout,
                verify=verify_ssl,
                headers=headers
            ) as response:
                response.raise_for_status()
                
                content = bytearray()
                for chunk in response.iter_content(chunk_size=self.chunk_size):
                    if chunk:
                        content.extend(chunk)
                
                if not content:
                    typer.echo("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª")
                    return None
                    
                return bytes(content)
                
        except requests.exceptions.SSLError:
            typer.echo("‚ö†Ô∏è –û—à–∏–±–∫–∞ SSL, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return self._download_file(url, verify_ssl=False)
        except Exception as e:
            typer.echo(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return None

    def _process_record(self, record: Dict[str, Any], verify_ssl: bool) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å"""
        url = record.get("url_final") or record.get("url")
        if not url:
            return False

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º URL
        base_url = self.config.source.url.split('?')[0].split('#')[0] if self.config.source.url else None
        transformed_url = transform_smart_url(
            url,
            template_name=self.config.template_name,
            base_url=base_url
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å
        if not self._is_pdf_url(transformed_url):
            typer.echo(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: URL –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ PDF ({transformed_url})")
            return False

        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å
        for attempt in range(self.max_retries):
            typer.echo(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –¥–ª—è {transformed_url}")
            content = self._download_file(transformed_url, verify_ssl)
            
            if content:
                record.update({
                    "file_content": content,
                    "download_status": "success",
                    "final_url": transformed_url
                })
                typer.echo(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(content)} –±–∞–π—Ç")
                return True
                
            time.sleep(self.retry_delay)
        
        record["download_error"] = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫"
        return False

    def run(self, data: Dict[str, Any]) -> Dict[str, Any]:
        if not isinstance(data, dict):
            return data

        verify_ssl = getattr(self.config.source.fetch, "verify_ssl", True)
        stats = {"total": 0, "success": 0, "skipped": 0, "failed": 0}

        for block_name, items in data.items():
            if not isinstance(items, list):
                continue

            stats["total"] += len(items)
            processed_items = []

            for record in tqdm(items, desc=f"üì• Downloading [{block_name}]", unit="file"):
                if not isinstance(record, dict):
                    continue

                url = record.get("url_final") or record.get("url")
                if not url:
                    typer.echo("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –±–µ–∑ URL ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–∞")
                    stats["skipped"] += 1
                    continue

                # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ URL: –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω ‚Äî –Ω–µ –∫–∞—á–∞–µ–º
                if is_known_by_url(url):
                    typer.echo(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: —Ñ–∞–π–ª —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–ª—Å—è ‚Üí {url}")
                    record["download_status"] = "skipped"
                    stats["skipped"] += 1
                    continue

                # üì¶ –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å
                if self._process_record(record, verify_ssl):
                    stats["success"] += 1
                else:
                    stats["failed"] += 1

                processed_items.append(record)

            data[block_name] = processed_items

        typer.echo(f"\nüìä –ò—Ç–æ–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏: –∑–∞–≥—Ä—É–∂–µ–Ω–æ={stats['success']}, –ø—Ä–æ–ø—É—â–µ–Ω–æ={stats['skipped']}, –æ—à–∏–±–∫–∏={stats['failed']}, –≤—Å–µ–≥–æ={stats['total']}")
        return data