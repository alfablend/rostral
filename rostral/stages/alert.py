import os
from colorama import Fore, Style
from datetime import datetime
from jinja2 import Template
from typing import Dict, Any
from .base import PipelineStage
from rostral.db import is_known_by_hash, save_event

MAX_EVENTS_PER_TEMPLATE = int(os.getenv("MAX_EVENTS_PER_TEMPLATE", 10))

class AlertStage(PipelineStage):
    def run(self, data: Dict[str, Any]) -> Dict[str, Any]:
        print(f"\n{Fore.YELLOW}‚è≥ –ó–∞–ø—É—Å–∫ AlertStage{Style.RESET_ALL}")
        
        if not hasattr(self.config, 'alert'):
            print(f"{Fore.RED}‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç{Style.RESET_ALL}")
            return {"alert": {"error": "No alert config"}}


        # –û–±—ä–µ–¥–∏–Ω—è–µ–º GPT-–æ—Ç–≤–µ—Ç—ã —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if 'gpt_responses' in data:
            for block_name in ['events', 'documents', 'items']:
                if block_name in data and isinstance(data[block_name], list):
                    for i, item in enumerate(data[block_name]):
                        if isinstance(item, dict):
                            doc_id = f"{block_name}_{i}"
                            item['gpt'] = data['gpt_responses'].get(doc_id, {})

        # –†–µ–Ω–¥–µ—Ä–∏–º –∞–ª–µ—Ä—Ç—ã
        print(f"üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –≤ AlertStage: {len(data.get('events', []))}")
        rendered_alerts = {}
        for template_name, template_str in self.config.alert.templates.items():
            try:
                context = {
                    'now': datetime.now(),
                    **data
                }
                template = Template(template_str)
                rendered = template.render(**context)
                rendered_alerts[template_name] = rendered
                
                # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
                self._print_alert(rendered, template_name)
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ '{template_name}': {str(e)}"
                rendered_alerts[template_name] = error_msg
                print(f"{Fore.RED}‚ùå {error_msg}{Style.RESET_ALL}")

        print(f"{Fore.GREEN}‚úÖ AlertStage –∑–∞–≤–µ—Ä—à–µ–Ω{Style.RESET_ALL}")
        
        if "events" in data and isinstance(data["events"], list):
            events_to_save = data["events"][:MAX_EVENTS_PER_TEMPLATE]
            for record in events_to_save:
                if is_known_by_hash(record):
                    record["status"] = "skipped"
                    continue
                if isinstance(record, dict) and "url" in record:
                    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ GPT
                    if 'gpt' in record:  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ GPT –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                        record['gpt_text'] = record['gpt'].get('summary', '')  # –ò–ª–∏ –¥—Ä—É–≥–æ–µ –ø–æ–ª–µ –∏–∑ GPT –æ—Ç–≤–µ—Ç–∞
                    save_event(record, config=self.config)
                    print(f"{Fore.BLUE}üíæ –°–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {record['url']}{Style.RESET_ALL}")
        return {"alert": rendered_alerts}

    def _print_alert(self, content: str, alert_name: str):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –∞–ª–µ—Ä—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        print(f"\n{Fore.CYAN}üîî {alert_name.upper()} {Style.RESET_ALL}")
        print(f"{Fore.BLUE}{'-'*50}{Style.RESET_ALL}")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –≤—ã–≤–æ–¥–∏–º —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
        for line in content.split('\n'):
            if line.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if line.startswith('==='):
                    print(f"{Fore.YELLOW}{line}{Style.RESET_ALL}")
                elif any(line.lstrip().startswith(x) for x in ['-', '‚Ä¢', '*']):
                    print(f"  {Fore.GREEN}{line.lstrip()}{Style.RESET_ALL}")
                    print(f"{Fore.MAGENTA}–°–æ–±—ã—Ç–∏–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ{Style.RESET_ALL}")
                elif ':' in line:
                    key, val = line.split(':', 1)
                    print(f"{Fore.MAGENTA}{key}:{Style.RESET_ALL}{val}")
                else:
                    print(line)
        
        print(f"{Fore.BLUE}{'-'*50}{Style.RESET_ALL}")