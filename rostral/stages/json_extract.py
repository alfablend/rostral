# rostral/stages/json_extract.py

import json
import typer
import jmespath
from typing import Any
from .base import PipelineStage
from rostral.models import ExtractFieldConfig
from rostral.stages.transforms import TRANSFORM_REGISTRY

class JsonExtractStage(PipelineStage):
    """
    –°—Ç–∞–¥–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º JMESPath
    """
    
    def run(self, data: dict) -> dict:
        json_data = data.get("json")
        
        if not json_data:
            typer.echo("‚ö†Ô∏è JsonExtractStage: –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç JSON")
            return {}
            
        typer.echo(f"üîç JsonExtractStage: –æ–±—Ä–∞–±–æ—Ç–∫–∞ JSON (—Ç–∏–ø: {type(json_data)})")
        
        result = {}
        
        for block_name, block_cfg in (self.config.extract or {}).items():
            try:
                selector = block_cfg.selector.lstrip('$.')
                items = jmespath.search(selector, json_data) or []
                
                if not isinstance(items, list):
                    items = [items]
                    
                processed_items = []
                
                for item in items:
                    if not item:
                        continue
                        
                    record = self._process_item(item, block_cfg)
                    if record:
                        processed_items.append(record)
                
                result[block_name] = processed_items
                
            except Exception as e:
                typer.echo(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ {block_name}: {str(e)}")
                result[block_name] = []
        
        return result
    
    def _process_item(self, item: dict, block_cfg: Any) -> dict:
        
        debug_info = {
            'item_keys': list(item.keys()),
            'sample_data': {k: item.get(k) for k in list(item.keys())[:3]},
            'jmespath_guid': jmespath.search('guid', item)
        }   
        typer.echo(f"\nüîç Debug: {json.dumps(debug_info, indent=2)}")
        
        record = {}
        context = {}

        # 1. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É
        for field_name, rule in block_cfg.fields.items():
            try:
                if isinstance(rule, str):
                    # –ü—Ä–æ—Å—Ç—ã–µ JMESPath –≤—ã—Ä–∞–∂–µ–Ω–∏—è
                    value = jmespath.search(rule.lstrip('$.'), item)
                    record[field_name] = value if value is not None else ""
                    context[field_name] = record[field_name]
                
                elif isinstance(rule, ExtractFieldConfig):
                    # –°–ª–æ–∂–Ω—ã–µ –ø–æ–ª—è —Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è–º–∏
                    raw_value = jmespath.search(rule.attr.lstrip('$.'), item) if rule.attr else None
                    
                    if rule.transform_type == 'jinja':
                        context['value'] = raw_value
                        rendered = TRANSFORM_REGISTRY['jinja'](
                            template_str=rule.transform,
                            context=context
                        )
                        record[field_name] = rendered
                        context[field_name] = rendered

            except Exception as e:
                typer.echo(f"‚ùå {field_name}: {str(e)}", err=True)
                record[field_name] = ""

        return record