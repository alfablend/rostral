# rostral/stages/event_json.py

import requests
import json
import typer
from .base import PipelineStage
from typing import Dict, Any

class EventJsonStage(PipelineStage):
    """–°—Ç–∞–¥–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è JSON-–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    
    def run(self, data: Dict[str, Any]) -> Dict[str, Any]:
        if not isinstance(data, dict):
            return data

        verify_ssl = getattr(self.config.source.fetch, "verify_ssl", True)
        headers = getattr(self.config.source.fetch, "headers", {}) or {}
        timeout = getattr(self.config.source.fetch, "timeout", 10)

        for block_name, items in data.items():
            if not isinstance(items, list):
                continue

            for record in items:
                url = record.get("url")
                if not url:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç URL
                    continue

                try:
                    typer.echo(f"üåê –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏–∑ {url}")
                    response = requests.get(
                        url,
                        headers=headers,
                        verify=verify_ssl,
                        timeout=timeout
                    )
                    response.raise_for_status()

                    json_data = response.json()
                    
                    if json_data:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —à–∞–±–ª–æ–Ω–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                        template_name = record.get("template_name", self.config.template_name)
                        
                        # –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª–µ text –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                        record["text"] = json.dumps(json_data, ensure_ascii=False, indent=2)
                        record["download_status"] = "json_success"
                        
                        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —á—Ç–æ template_name –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω
                        record["template_name"] = template_name
                        typer.echo(f"‚úÖ –¢–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω (—à–∞–±–ª–æ–Ω: {template_name})")
                    else:
                        record["download_status"] = "json_empty"
                        typer.echo("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π JSON-–æ—Ç–≤–µ—Ç")

                except json.JSONDecodeError:
                    record["download_status"] = "json_invalid"
                    typer.echo("‚ùå –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON")
                except Exception as e:
                    record["download_status"] = "json_error"
                    typer.echo(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON: {e}")

        return data